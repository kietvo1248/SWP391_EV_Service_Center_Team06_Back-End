// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============
// ENUMS
// ==============
enum Role {
  CUSTOMER
  STAFF
  TECHNICIAN
  INVENTORY_MANAGER
  ADMIN
  STATION_ADMIN
}

enum AppointmentStatus {
  PENDING          // Chờ nhân viên xác nhận & phân công
  CONFIRMED        // Đã xác nhận, chờ khách đến
  PENDING_APPROVAL // Đã khám, chờ khách duyệt báo giá
  IN_PROGRESS      // Khách đã đến / KTV đang làm
  COMPLETED        // Đã hoàn thành dịch vụ
  CANCELLED        // Đã hủy
}

// --- THÊM MỚI: Enum cho trạng thái ServiceRecord ---
enum ServiceRecordStatus {
  PENDING          // Đã phân công, chờ KTV bắt đầu
  DIAGNOSING       // KTV đang kiểm tra
  WAITING_APPROVAL // Đã gửi báo giá, chờ khách duyệt (trùng với AppointmentStatus)
  WAITING_PARTS    // Chờ phụ tùng
  REPAIRING        // KTV đang sửa chữa (sau khi khách duyệt)
  QUALITY_CHECK    // Đang kiểm tra chất lượng sau sửa chữa
  COMPLETED        // KTV đã hoàn thành công việc
  CANCELLED        // Đã hủy (do khách từ chối báo giá hoặc lý do khác)
}

enum InvoiceStatus {
  UNPAID
  PAID
  OVERDUE
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

// ---Enum cho Yêu cầu Nhập hàng ---
enum RestockRequestStatus {
  PENDING   // IM đã tạo, chờ Admin duyệt
  APPROVED  // Admin đã duyệt, chờ IM nhận hàng
  REJECTED  // Admin từ chối
  COMPLETED // IM đã nhận hàng (đã nhập kho)
}

// ---Enum cho Trạng thái Xuất kho ---
enum PartUsageStatus {
  REQUESTED // KTV yêu cầu, chờ IM xuất kho
  ISSUED    // IM đã xuất kho, KTV đã nhận
  CANCELLED // KTV hủy yêu cầu
}

// ==============
// MODELS
// ==============

model ServiceCenter {
  id                  String  @id @default(uuid())
  name                String
  address             String
  phoneNumber         String? @map("phone_number")
  openingTime         String  @default("08:00") @map("opening_time")
  closingTime         String  @default("17:00") @map("closing_time")
  slotDurationMinutes Int     @default(60) @map("slot_duration_minutes")
  capacityPerSlot     Int     @default(2) @map("capacity_per_slot")

  staff          User[]
  appointments   ServiceAppointment[]
  inventoryItems InventoryItem[]
  restockRequests RestockRequest[]

  @@map("service_centers")
}

model User {
  id                   String    @id @default(uuid())
  userCode             String?   @unique @map("user_code")
  fullName             String    @map("full_name")
  email                String    @unique
  passwordHash         String?   @map("password_hash") // Optional for Google Sign-In
  googleId             String?   @unique // Renamed from google_id
  phoneNumber          String?   @map("phone_number")
  address              String?   // Moved from migration
  role                 Role      @default(CUSTOMER)
  isActive             Boolean   @default(true) @map("is_active") // Moved from migration
  serviceCenterId      String?   @map("service_center_id")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  serviceCenter    ServiceCenter?       @relation(fields: [serviceCenterId], references: [id], onDelete: SetNull) // Allow null if center deleted
  technicianProfile TechnicianProfile?  // One-to-one with User
  certifications   StaffCertification[] // Relation to join table
  vehicles         Vehicle[]            // One User has Many Vehicles
  appointments     ServiceAppointment[] // Customer appointments
  assignedServices ServiceRecord[]      // Technician assigned records
  feedbacks        Feedback[]           // Feedbacks given by this user
  servicePackages  ServicePackage[]     // Packages owned by this user
  sentMessages     Message[]            @relation("Sender")
  receivedMessages Message[]            @relation("Receiver")
  notifications    Notification[]       // Notifications for this user
  reports          Report[]             // Reports generated by this user (if Admin)
  imRestockRequests     RestockRequest[] @relation("IMRestockRequests") // Các yêu cầu IM tạo
  adminRestockApprovals RestockRequest[] @relation("AdminRestockApprovals") // Các yêu cầu Admin duyệt

  resetPasswordCode    String?
  resetPasswordExpires DateTime?

  @@map("users")
}

model TechnicianProfile {
  id             String  @id @default(uuid())
  specialization String
  // certifications Json? // --- LOẠI BỎ: Dùng StaffCertification ---
  userId         String  @unique // One-to-one relation with User
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Delete profile if User deleted

  @@map("technician_profiles")
}

model Certification {
  id                  String @id @default(uuid())
  name                String
  issuingOrganization String @map("issuing_organization")

  staff StaffCertification[] // Relation to join table

  @@map("certifications")
}

model StaffCertification {
  staffId         String @map("staff_id")
  certificationId String @map("certification_id")

  staff         User          @relation(fields: [staffId], references: [id], onDelete: Cascade) // Delete join if User deleted
  certification Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade) // Delete join if Certification deleted

  @@id([staffId, certificationId])
  @@map("staff_certifications")
}

model Vehicle {
  id              String    @id @default(uuid())
  make            String
  model           String
  year            Int
  vin             String    @unique
  licensePlate    String?   @map("license_plate")
  currentMileage  Int?      @map("current_mileage")
  lastServiceDate DateTime? @db.Date @map("last_service_date")

  ownerId      String
  owner        User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade) // Delete vehicles if owner deleted
  appointments ServiceAppointment[] // Appointments for this vehicle

  @@map("vehicles")
}

model ServiceType {
  id          String  @id @default(uuid())
  name        String
  description String?

  appointments AppointmentService[] // Relation to join table

  @@map("service_types")
}

model AppointmentService {
  appointmentId String @map("appointment_id")
  serviceTypeId String @map("service_type_id")

  appointment   ServiceAppointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade) // Delete join if Appointment deleted
  serviceType   ServiceType        @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade) // Delete join if ServiceType deleted

  @@id([appointmentId, serviceTypeId])
  @@map("appointment_services")
}

model ServiceAppointment {
  id                String            @id @default(uuid())
  appointmentDate   DateTime          @map("appointment_date")
  status            AppointmentStatus @default(PENDING)
  customerNotes     String?           @map("customer_notes")
  createdAt         DateTime          @default(now()) @map("created_at")

  customerId        String
  vehicleId         String
  serviceCenterId   String

  customer          User               @relation(fields: [customerId], references: [id], onDelete: Restrict) // Prevent deleting User if appointments exist
  vehicle           Vehicle            @relation(fields: [vehicleId], references: [id], onDelete: Restrict) // Prevent deleting Vehicle if appointments exist
  serviceCenter     ServiceCenter      @relation(fields: [serviceCenterId], references: [id], onDelete: Restrict) // Prevent deleting Center if appointments exist
  serviceRecord     ServiceRecord?     // One-to-one with ServiceRecord
  requestedServices AppointmentService[] // Relation to join table
  feedbacks         Feedback[]         // Feedbacks related to this appointment

  @@map("service_appointments")
}

model ServiceRecord {
  id            String    @id @default(uuid())
  startTime     DateTime? @map("start_time")
  endTime       DateTime? @map("end_time")
  staffNotes    String?   @map("staff_notes")
  // --- THAY ĐỔI: Sử dụng Enum ---
  status        ServiceRecordStatus @default(PENDING) // Thêm default
  // --- KẾT THÚC THAY ĐỔI ---
  appointmentId String    @unique // One-to-one relation with Appointment
  technicianId  String

  appointment ServiceAppointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade) // Delete record if Appointment deleted
  technician  User               @relation(fields: [technicianId], references: [id], onDelete: Restrict) // Prevent deleting Technician if records exist
  partsUsed   PartUsage[]        // Parts used in this service
  quotation   Quotation?         // One-to-one with Quotation
  invoice     Invoice?           // One-to-one with Invoice

  @@map("service_records")
}

model Part {
  id             String        @id @default(uuid())
  sku            String        @unique
  name           String
  description    String?
  price          Decimal       @db.Decimal(12, 2)

  inventoryItems InventoryItem[] // Inventory levels for this part
  partUsages     PartUsage[]     // Usage records for this part
  restockRequests RestockRequest[]

  @@map("parts")
}

model InventoryItem {
  id              String @id @default(uuid())
  quantityInStock Int    @default(0) @map("quantity_in_stock")
  minStockLevel   Int    @default(5) @map("min_stock_level")

  partId          String
  serviceCenterId String

  part          Part          @relation(fields: [partId], references: [id], onDelete: Restrict) // Prevent deleting Part if inventory exists
  serviceCenter ServiceCenter @relation(fields: [serviceCenterId], references: [id], onDelete: Cascade) // Delete inventory if Center deleted

  @@map("inventory_items")
}

model PartUsage {
  id              String  @id @default(uuid())
  quantity        Int
  unitPrice       Decimal @db.Decimal(12, 2) @map("unit_price") // Price at the time of usage
  status          PartUsageStatus @default(REQUESTED)
  serviceRecordId String
  partId          String

  serviceRecord ServiceRecord @relation(fields: [serviceRecordId], references: [id], onDelete: Cascade) // Delete usage if Record deleted
  part          Part          @relation(fields: [partId], references: [id], onDelete: Restrict) // Prevent deleting Part if used

  @@map("part_usages")
}

model RestockRequest {
  id                 String   @id @default(uuid())
  quantity           Int // Số lượng yêu cầu
  notes              String? // Ghi chú của IM
  status             RestockRequestStatus @default(PENDING)
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  processedAt        DateTime? // Ngày Admin duyệt hoặc IM nhận hàng

  partId             String
  part               Part     @relation(fields: [partId], references: [id])
  
  inventoryManagerId String   // ID của IM yêu cầu
  inventoryManager   User     @relation("IMRestockRequests", fields: [inventoryManagerId], references: [id])
  
  serviceCenterId    String
  serviceCenter      ServiceCenter @relation(fields: [serviceCenterId], references: [id])
  
  adminId            String?  // ID của Admin duyệt
  admin              User?    @relation("AdminRestockApprovals", fields: [adminId], references: [id])

  @@map("restock_requests")
}

model Quotation {
  id              String   @id @default(uuid())
  estimatedCost   Decimal  @db.Decimal(12, 2) @map("estimated_cost")
  creationDate    DateTime @default(now()) @map("creation_date") // Use DateTime instead of Date

  serviceRecordId String   @unique // One-to-one with ServiceRecord
  serviceRecord   ServiceRecord @relation(fields: [serviceRecordId], references: [id], onDelete: Cascade) // Delete quotation if Record deleted

  @@map("quotations")
}

model Invoice {
  id              String        @id @default(uuid())
  totalAmount     Decimal       @db.Decimal(12, 2) @map("total_amount")
  issueDate       DateTime      @default(now()) @map("issue_date")
  dueDate         DateTime      @map("due_date")
  status          InvoiceStatus @default(UNPAID)

  serviceRecordId String        @unique // One-to-one with ServiceRecord
  serviceRecord   ServiceRecord @relation(fields: [serviceRecordId], references: [id], onDelete: Restrict) // Keep Invoice even if Record deleted? Or Cascade? RESTRICT is safer.
  payments        Payment[]     // Payments made for this invoice

  @@map("invoices")
}

model Payment {
  id            String        @id @default(uuid())
  paymentDate   DateTime      @default(now()) @map("payment_date")
  paymentMethod String        @map("payment_method") // Consider an Enum?
  status        PaymentStatus @default(PENDING)

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade) // Delete payment if Invoice deleted

  @@map("payments")
}

model Feedback {
  id            String  @id @default(uuid())
  rating        Int?    // Make rating mandatory? @default(5)
  content       String?
  // --- THÊM MỚI: Liên kết với Lịch hẹn ---
  appointmentId String
  appointment   ServiceAppointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade) // Delete feedback if Appointment deleted
  // --- KẾT THÚC THÊM MỚI ---
  customerId    String
  customer      User    @relation(fields: [customerId], references: [id], onDelete: Cascade) // Delete feedback if Customer deleted

  @@map("feedback")
}

model ServicePackage {
  id         String    @id @default(uuid())
  name       String
  expiryDate DateTime? @db.Date @map("expiry_date")
  // Consider adding relation to ServiceType if it includes specific services
  // serviceTypes ServiceType[] @relation(...)

  customerId String
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade) // Delete package if Customer deleted

  @@map("service_packages")
}

model Message {
  id         String   @id @default(uuid())
  content    String
  timestamp  DateTime @default(now())

  senderId   String
  receiverId String

  sender   User @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade) // Delete message if sender deleted
  receiver User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade) // Delete message if receiver deleted

  @@map("messages")
}

model Notification {
  id          String   @id @default(uuid())
  message     String
  sentTime    DateTime @default(now()) @map("sent_time")
  // Add 'read Boolean @default(false)'?

  recipientId String
  recipient   User   @relation(fields: [recipientId], references: [id], onDelete: Cascade) // Delete notification if recipient deleted

  @@map("notifications")
}

model Report {
  id            String   @id @default(uuid())
  reportType    String   @map("report_type") // Consider an Enum?
  generatedDate DateTime @default(now()) @map("generated_date") // Use DateTime
  // Add content field? e.g., content Json?

  adminId       String
  admin         User   @relation(fields: [adminId], references: [id], onDelete: Restrict) // Prevent deleting Admin if reports exist

  @@map("reports")
}