// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============
// ENUMS
// ==============
enum Role {
  CUSTOMER
  STAFF
  TECHNICIAN
  INVENTORY_MANAGER
  ADMIN
  STATION_ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  PENDING_APPROVAL
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  UNPAID
  PAID
  OVERDUE
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

// ==============
// MODELS
// ==============

// Bảng Trung tâm dịch vụ
model ServiceCenter {
  id                  String  @id @default(uuid())
  name                String
  address             String
  phoneNumber         String? @map("phone_number")
  openingTime         String  @default("08:00") @map("opening_time")
  closingTime         String  @default("17:00") @map("closing_time")
  slotDurationMinutes Int     @default(60) @map("slot_duration_minutes")
  capacityPerSlot     Int     @default(2) @map("capacity_per_slot")

  staff          User[]
  appointments   ServiceAppointment[]
  inventoryItems InventoryItem[]

  @@map("service_centers")
}

// Bảng User trung tâm
model User {
  id                   String    @id @default(uuid())
  userCode             String?   @unique @map("user_code")
  fullName             String    @map("full_name")
  email                String    @unique
  passwordHash         String?   @map("password_hash")
  googleId             String?   @unique
  phoneNumber          String?   @map("phone_number")
  address              String?
  role                 Role      @default(CUSTOMER)
  isActive             Boolean   @default(true) @map("is_active")
  serviceCenterId      String?   @map("service_center_id")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  serviceCenter    ServiceCenter?         @relation(fields: [serviceCenterId], references: [id])
  technicianProfile TechnicianProfile?
  certifications   StaffCertification[]
  vehicles         Vehicle[]
  appointments     ServiceAppointment[]
  assignedServices ServiceRecord[]
  feedbacks        Feedback[]
  servicePackages  ServicePackage[]
  sentMessages     Message[]              @relation("Sender")
  receivedMessages Message[]              @relation("Receiver")
  notifications    Notification[]
  reports          Report[]

  resetPasswordCode    String?
  resetPasswordExpires DateTime?

  @@map("users")
}

// Bảng hồ sơ kỹ thuật viên
model TechnicianProfile {
  id             String @id @default(uuid())
  specialization String
  certifications Json?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("technician_profiles")
}

// Bảng Chứng chỉ
model Certification {
  id                  String @id @default(uuid())
  name                String
  issuingOrganization String @map("issuing_organization")

  staff StaffCertification[]

  @@map("certifications")
}

// Bảng nối Nhân viên và Chứng chỉ
model StaffCertification {
  staffId         String @map("staff_id")
  certificationId String @map("certification_id")

  staff         User          @relation(fields: [staffId], references: [id], onDelete: Cascade)
  certification Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  @@id([staffId, certificationId])
  @@map("staff_certifications")
}

// Bảng xe
model Vehicle {
  id              String    @id @default(uuid())
  make            String
  model           String
  year            Int
  vin             String    @unique
  licensePlate    String?   @map("license_plate")
  currentMileage  Int?      @map("current_mileage")
  lastServiceDate DateTime? @db.Date @map("last_service_date")

  ownerId      String
  owner        User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  appointments ServiceAppointment[]

  @@map("vehicles")
}

// Bảng Loại dịch vụ
model ServiceType {
  id          String  @id @default(uuid())
  name        String
  description String?

  // --- THÊM MỚI: Liên kết ngược lại với bảng trung gian ---
  appointments AppointmentService[]

  @@map("service_types")
}

// --- BẢNG MỚI: Bảng trung gian kết nối Lịch hẹn và Loại dịch vụ ---
model AppointmentService {
  appointmentId String @map("appointment_id")
  serviceTypeId String @map("service_type_id")

  appointment   ServiceAppointment @relation(fields: [appointmentId], references: [id])
  serviceType   ServiceType        @relation(fields: [serviceTypeId], references: [id])

  @@id([appointmentId, serviceTypeId])
  @@map("appointment_services")
}

// Bảng lịch hẹn dịch vụ
model ServiceAppointment {
  id              String            @id @default(uuid())
  appointmentDate DateTime          @map("appointment_date")
  status          AppointmentStatus @default(PENDING)
  customerNotes   String?           @map("customer_notes")
  createdAt       DateTime          @default(now()) @map("created_at")

  customerId      String
  vehicleId       String
  serviceCenterId String

  customer      User                 @relation(fields: [customerId], references: [id])
  vehicle       Vehicle              @relation(fields: [vehicleId], references: [id])
  serviceCenter ServiceCenter        @relation(fields: [serviceCenterId], references: [id])
  serviceRecord ServiceRecord?
  
  // --- THÊM MỚI: Liên kết đến các dịch vụ được yêu cầu thông qua bảng trung gian ---
  requestedServices AppointmentService[]

  @@map("service_appointments")
}

// ... (các model còn lại không thay đổi)
model ServiceRecord {
  id            String     @id @default(uuid())
  startTime     DateTime?  @map("start_time")
  endTime       DateTime?  @map("end_time")
  staffNotes    String?    @map("staff_notes")
  status        String?

  appointmentId String     @unique
  technicianId  String

  appointment ServiceAppointment @relation(fields: [appointmentId], references: [id])
  technician  User               @relation(fields: [technicianId], references: [id])
  partsUsed   PartUsage[]
  quotation   Quotation?
  invoice     Invoice?

  @@map("service_records")
}

model Part {
  id          String  @id @default(uuid())
  sku         String  @unique
  name        String
  description String?
  price       Decimal @db.Decimal(12, 2)

  inventoryItems InventoryItem[]
  partUsages     PartUsage[]

  @@map("parts")
}

model InventoryItem {
  id              String @id @default(uuid())
  quantityInStock Int    @default(0) @map("quantity_in_stock")
  minStockLevel   Int    @default(5) @map("min_stock_level")

  partId          String
  serviceCenterId String

  part          Part          @relation(fields: [partId], references: [id])
  serviceCenter ServiceCenter @relation(fields: [serviceCenterId], references: [id])

  @@map("inventory_items")
}

model PartUsage {
  id              String  @id @default(uuid())
  quantity        Int
  unitPrice       Decimal @db.Decimal(12, 2) @map("unit_price")

  serviceRecordId String
  partId          String

  serviceRecord ServiceRecord @relation(fields: [serviceRecordId], references: [id])
  part          Part          @relation(fields: [partId], references: [id])

  @@map("part_usages")
}

model Quotation {
  id              String   @id @default(uuid())
  estimatedCost   Decimal  @db.Decimal(12, 2) @map("estimated_cost")
  creationDate    DateTime @db.Date @default(now()) @map("creation_date")

  serviceRecordId String        @unique
  serviceRecord   ServiceRecord @relation(fields: [serviceRecordId], references: [id])

  @@map("quotations")
}

model Invoice {
  id              String        @id @default(uuid())
  totalAmount     Decimal       @db.Decimal(12, 2) @map("total_amount")
  issueDate       DateTime      @default(now()) @map("issue_date")
  dueDate         DateTime      @map("due_date")
  status          InvoiceStatus @default(UNPAID)

  serviceRecordId String        @unique
  serviceRecord   ServiceRecord @relation(fields: [serviceRecordId], references: [id])
  payments        Payment[]

  @@map("invoices")
}

model Payment {
  id            String        @id @default(uuid())
  paymentDate   DateTime      @default(now()) @map("payment_date")
  paymentMethod String        @map("payment_method")
  status        PaymentStatus @default(PENDING)

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model Feedback {
  id         String  @id @default(uuid())
  rating     Int?
  content    String?

  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  @@map("feedback")
}

model ServicePackage {
  id         String    @id @default(uuid())
  name       String
  expiryDate DateTime? @db.Date @map("expiry_date")

  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  @@map("service_packages")
}

model Message {
  id         String   @id @default(uuid())
  content    String
  timestamp  DateTime @default(now())

  senderId   String
  receiverId String

  sender   User @relation("Sender", fields: [senderId], references: [id])
  receiver User @relation("Receiver", fields: [receiverId], references: [id])

  @@map("messages")
}

model Notification {
  id          String   @id @default(uuid())
  message     String
  sentTime    DateTime @default(now()) @map("sent_time")

  recipientId String
  recipient   User   @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}

model Report {
  id            String   @id @default(uuid())
  reportType    String   @map("report_type")
  generatedDate DateTime @db.Date @default(now()) @map("generated_date")

  adminId       String
  admin         User   @relation(fields: [adminId], references: [id])

  @@map("reports")
}

