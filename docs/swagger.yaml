openapi: 3.0.0
info:
  title: EV Service Center API
  description: Tài liệu API tổng hợp cho hệ thống Trung tâm Dịch vụ Xe điện (EV Service Center).
  version: 1.0.0
servers:
  - url: http://localhost:6969/api # Adjust port if needed
    description: Development server
  - url: https://swp391-restapi-ev-service-center-back-ckkz.onrender.com/api
    description: Production server

tags:
  - name: Auth
    description: Đăng ký, đăng nhập (thường & Google), quên mật khẩu, tạo tài khoản (Admin).
  - name: Profile
    description: Quản lý thông tin cá nhân (Xem, cập nhật, đổi mật khẩu).
  - name: Vehicle
    description: (Khách hàng/Staff) Quản lý phương tiện.
  - name: Service Center
    description: Tra cứu thông tin trung tâm dịch vụ và lịch trống.
  - name: Appointment
    description: (Khách hàng) Đặt lịch hẹn, xem chi tiết, duyệt báo giá.
  - name: Staff
    description: (Staff/Station Admin/Admin) Tiếp nhận xe, quản lý lịch hẹn, tạo hóa đơn, thu tiền mặt.
  - name: Technician
    description: (Kỹ thuật viên) Xem công việc, gửi chẩn đoán, hoàn thành công việc.
  # - name: Admin # Có thể gộp vào Auth hoặc giữ riêng nếu có thêm API Admin khác

paths:
  # --- AUTHENTICATION ---
  /auth/register:
    post:
      tags: [Auth]
      summary: Đăng ký tài khoản mới (Customer)
      requestBody:
        $ref: '#/components/requestBodies/RegisterInput'
      responses:
        '201':
          description: Đăng ký thành công.
          content: { application/json: { schema: { $ref: '#/components/schemas/User' } } }
        '400':
          $ref: '#/components/responses/BadRequestError'

  /auth/login:
    post:
      tags: [Auth]
      summary: Đăng nhập (Email/Password)
      requestBody:
        $ref: '#/components/requestBodies/LoginInput'
      responses:
        '200':
          description: Đăng nhập thành công.
          content: { application/json: { schema: { $ref: '#/components/schemas/LoginResponse' } } }
        '400':
          $ref: '#/components/responses/BadRequestError' # Invalid credentials

  /auth/google:
    get:
      tags: [Auth]
      summary: Bắt đầu đăng nhập với Google
      responses:
        '302': { description: Redirect đến Google. }

  /auth/google/callback:
    get:
      tags: [Auth]
      summary: Callback sau khi Google xác thực
      responses:
        '200':
          description: Xác thực Google thành công.
          content: { application/json: { schema: { $ref: '#/components/schemas/GoogleOAuthResponse' } } }
        '401':
          $ref: '#/components/responses/UnauthorizedError' # Google auth fails

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Yêu cầu mã đặt lại mật khẩu
      requestBody: { $ref: '#/components/requestBodies/ForgotPasswordInput' }
      responses:
        '200': { description: Gửi mã thành công., content: { application/json: { schema: { properties: { message: { type: string } } } } } }
        '404': { description: Email không tồn tại (ẩn)., content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  /auth/verify-reset-code:
    post:
      tags: [Auth]
      summary: Xác thực mã đặt lại mật khẩu
      requestBody: { $ref: '#/components/requestBodies/VerifyCodeInput' }
      responses:
        '200':
          description: Mã hợp lệ, trả về resetToken.
          content: { application/json: { schema: { properties: { message: { type: string }, resetToken: { type: string } } } } }
        '400':
          $ref: '#/components/responses/BadRequestError'

  /auth/reset-password:
    post:
      tags: [Auth]
      summary: Đặt lại mật khẩu mới
      description: Gửi mật khẩu mới và resetToken (trong header Authorization Bearer).
      parameters: [ { $ref: '#/components/parameters/ResetTokenHeader' } ]
      requestBody: { $ref: '#/components/requestBodies/ResetPasswordInput' }
      responses:
        '200':
          description: Mật khẩu đã được đặt lại.
          content: { application/json: { schema: { properties: { message: { type: string } } } } }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # --- ADMIN / ACCOUNT CREATION ---
  /auth/create-account:
    post:
      tags: [Auth] # Giữ trong Auth vì liên quan tài khoản
      summary: (Admin/Station Admin) Tạo tài khoản mới
      description: Admin/Station Admin tạo tài khoản nhân viên hoặc vai trò khác. Station Admin chỉ tạo được cho trạm của mình.
      security: [ { bearerAuth: [] } ] # Roles: ADMIN, STATION_ADMIN
      requestBody: { $ref: '#/components/requestBodies/CreateAccountInput' }
      responses:
        '201':
          description: Tạo tài khoản thành công.
          content: { application/json: { schema: { $ref: '#/components/schemas/CreateAccountResponse' } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /auth/all-profile:
    get:
      tags: [Auth] # Giữ trong Auth
      summary: (Admin) Lấy danh sách tất cả tài khoản
      security: [ { bearerAuth: [] } ] # Roles: ADMIN
      responses:
        '200':
          description: Thành công.
          content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/UserSummary' } } } }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  # --- PROFILE ---
  /auth/profile: # Đổi tên từ /profile thành /auth/profile cho nhất quán
    get:
      tags: [Profile]
      summary: Lấy thông tin cá nhân (My Profile)
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: Thành công., content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
  /auth/update-profile:
    put: # Đổi từ POST sang PUT cho cập nhật
      tags: [Profile]
      summary: Cập nhật thông tin cá nhân
      security: [ { bearerAuth: [] } ]
      requestBody: { $ref: '#/components/requestBodies/UpdateProfileInput' }
      responses:
        '200': { description: Cập nhật thành công., content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }

  /auth/change-password:
    post:
      tags: [Profile]
      summary: Đổi mật khẩu
      security: [ { bearerAuth: [] } ]
      requestBody: { $ref: '#/components/requestBodies/ChangePasswordInput' }
      responses:
        '200': { description: Đổi mật khẩu thành công., content: { application/json: { schema: { properties: { message: { type: string } } } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }

  # --- VEHICLE ---
  /vehicle/add-vehicle:
    post:
      tags: [Vehicle]
      summary: (Customer/Staff) Thêm phương tiện mới
      security: [ { bearerAuth: [] } ] # Roles: CUSTOMER, STAFF
      requestBody: { $ref: '#/components/requestBodies/VehicleInput' }
      responses:
        '201': { description: Thêm xe thành công., content: { application/json: { schema: { $ref: '#/components/schemas/Vehicle' } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /vehicle/my-vehicles:
    get:
      tags: [Vehicle]
      summary: (Customer) Lấy danh sách xe của tôi
      security: [ { bearerAuth: [] } ] # Roles: CUSTOMER
      responses:
        '200': { description: Thành công., content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Vehicle' } } } } }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  # --- SERVICE CENTER ---
  /service-centers:
    get:
      tags: [Service Center]
      summary: Lấy danh sách trung tâm dịch vụ
      security: [ { bearerAuth: [] } ] # All authenticated users
      responses:
        '200': { description: Thành công., content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/ServiceCenter' } } } } }
        '401': { $ref: '#/components/responses/UnauthorizedError' }

  /service-centers/{id}/available-slots:
    get:
      tags: [Service Center]
      summary: Lấy các khung giờ trống theo ngày
      security: [ { bearerAuth: [] } ]
      parameters:
        - { $ref: '#/components/parameters/ServiceCenterIdPath' }
        - { $ref: '#/components/parameters/DateQuery' }
      responses:
        '200': { description: Thành công., content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/AvailableSlot' } } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  # --- APPOINTMENT (Customer Focus) ---
  /appointments/my-vehicles:
    get:
      tags: [Appointment]
      summary: (Customer) Lấy danh sách xe của tôi (cho đặt lịch)
      security: [ { bearerAuth: [] } ] # Roles: CUSTOMER
      responses:
        '200': { description: Thành công., content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Vehicle' } } } } }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /appointments/service-types:
    get:
      tags: [Appointment]
      summary: Lấy danh sách loại dịch vụ
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: Thành công., content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/ServiceType' } } } } }
        '401': { $ref: '#/components/responses/UnauthorizedError' }

  /appointments/suggestions:
    get:
      tags: [Appointment]
      summary: (Customer) Lấy gợi ý dịch vụ (Demo)
      security: [ { bearerAuth: [] } ] # Roles: CUSTOMER
      parameters:
        - { name: vehicleModel, in: query, required: true, schema: { type: string } }
        - { name: mileage, in: query, required: true, schema: { type: integer } }
      responses:
        '200': { description: Thành công., content: { application/json: { schema: { type: array, items: { type: string } } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /appointments/create-appointment: # Sửa lại đường dẫn này
    post:
      tags: [Appointment]
      summary: (Customer) Tạo lịch hẹn mới
      security: [ { bearerAuth: [] } ] # Roles: CUSTOMER
      requestBody: { $ref: '#/components/requestBodies/AppointmentInput' }
      responses:
        '201':
          description: Tạo lịch hẹn thành công.
          content: { application/json: { schema: { properties: { message: { type: string }, appointment: { $ref: '#/components/schemas/Appointment' } } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /appointments/{id}: # Sửa lại đường dẫn này
    get:
      tags: [Appointment]
      summary: (Customer/Staff/Admin) Lấy chi tiết lịch hẹn
      security: [ { bearerAuth: [] } ]
      parameters: [ { $ref: '#/components/parameters/AppointmentIdPath' } ]
      responses:
        '200':
          description: Thành công.
          content: { application/json: { schema: { $ref: '#/components/schemas/AppointmentDetailSharedView' } } }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /appointments/{id}/respond:
    put:
      tags: [Appointment]
      summary: (Customer) Phản hồi báo giá (Duyệt/Từ chối)
      security: [ { bearerAuth: [] } ] # Roles: CUSTOMER
      parameters: [ { $ref: '#/components/parameters/AppointmentIdPath' } ]
      requestBody: { $ref: '#/components/requestBodies/RespondInput' }
      responses:
        '200': { description: Phản hồi thành công., content: { application/json: { schema: { properties: { message: { type: string } } } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  # --- STAFF ---
  /staff/technicians:
    get:
      tags: [Staff]
      summary: (Staff) Lấy danh sách kỹ thuật viên tại trung tâm
      security: [ { bearerAuth: [] } ] # Roles: STAFF, ADMIN, STATION_ADMIN
      responses:
        '200': { description: Thành công., content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/TechnicianInfo' } } } } }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /staff/appointments:
    get:
      tags: [Staff]
      summary: (Staff) Lấy danh sách lịch hẹn tại trung tâm
      security: [ { bearerAuth: [] } ] # Roles: STAFF, ADMIN, STATION_ADMIN
      parameters:
        - { name: status, in: query, required: false, schema: { $ref: '#/components/schemas/AppointmentStatusEnum' } }
      responses:
        '200': { description: Thành công., content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/AppointmentSummaryStaffView' } } } } }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /staff/appointments/search:
    get:
      tags: [Staff]
      summary: (Staff) Tìm lịch hẹn (CONFIRMED) theo SĐT khách hàng
      security: [ { bearerAuth: [] } ] # Roles: STAFF, ADMIN, STATION_ADMIN
      parameters:
        - { name: phone, in: query, required: true, description: SĐT khách (hoặc một phần), schema: { type: string } }
      responses:
        '200': { description: Thành công., content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/AppointmentSummaryStaffView' } } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  # Staff Get Appointment Details uses /appointments/{id}

  /staff/appointments/{id}/confirm:
    put:
      tags: [Staff]
      summary: (Staff) Xác nhận và phân công lịch hẹn (PENDING -> CONFIRMED)
      security: [ { bearerAuth: [] } ] # Roles: STAFF, ADMIN, STATION_ADMIN
      parameters: [ { $ref: '#/components/parameters/AppointmentIdPath' } ]
      requestBody: { $ref: '#/components/requestBodies/ConfirmAppointmentInput' }
      responses:
        '200':
          description: Thành công.
          content: { application/json: { schema: { properties: { message: { type: string }, data: { properties: { updatedAppointment: { $ref: '#/components/schemas/Appointment' }, newServiceRecord: { $ref: '#/components/schemas/ServiceRecord' } } } } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /staff/appointments/{id}/start: # Thêm route này
    put:
      tags: [Staff]
      summary: (Staff) Bắt đầu dịch vụ (CONFIRMED -> IN_PROGRESS)
      security: [ { bearerAuth: [] } ] # Roles: STAFF, ADMIN, STATION_ADMIN
      parameters: [ { $ref: '#/components/parameters/AppointmentIdPath' } ]
      responses:
        '200':
          description: Thành công.
          content: { application/json: { schema: { properties: { message: { type: string }, data: { properties: { updatedAppt: { $ref: '#/components/schemas/Appointment' }, updatedRecord: { $ref: '#/components/schemas/ServiceRecord' } } } } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /staff/service-records/{id}/create-invoice:
    post:
      tags: [Staff]
      summary: (Staff) Tạo hóa đơn từ Service Record
      security: [ { bearerAuth: [] } ] # Roles: STAFF, ADMIN, STATION_ADMIN
      parameters: [ { $ref: '#/components/parameters/ServiceRecordIdPath' } ]
      responses:
        '201': { description: Tạo hóa đơn thành công., content: { application/json: { schema: { $ref: '#/components/schemas/Invoice' } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /staff/invoices/{id}/pay-cash: # Thêm route này
    post:
      tags: [Staff]
      summary: (Staff) Ghi nhận thanh toán tiền mặt
      security: [ { bearerAuth: [] } ] # Roles: STAFF, ADMIN, STATION_ADMIN
      parameters: [ { $ref: '#/components/parameters/InvoiceIdPath' } ]
      responses:
        '200':
          description: Ghi nhận thành công.
          content: { application/json: { schema: { properties: { message: { type: string }, invoice: { $ref: '#/components/schemas/Invoice' } } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  # --- TECHNICIAN ---
  /technician/my-tasks:
    get:
      tags: [Technician]
      summary: (Technician) Lấy danh sách công việc được giao
      security: [ { bearerAuth: [] } ] # Roles: TECHNICIAN
      parameters:
        - { name: status, in: query, required: false, schema: { $ref: '#/components/schemas/ServiceRecordStatusEnum' } }
      responses:
        '200': { description: Thành công., content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/TechnicianTaskSummary' } } } } }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }

  /technician/service-records/{id}/diagnose:
    post:
      tags: [Technician]
      summary: (Technician) Gửi chẩn đoán và báo giá
      security: [ { bearerAuth: [] } ] # Roles: TECHNICIAN
      parameters: [ { $ref: '#/components/parameters/ServiceRecordIdPath' } ]
      requestBody: { $ref: '#/components/requestBodies/DiagnosisInput' }
      responses:
        '200':
          description: Gửi báo giá thành công.
          content: { application/json: { schema: { properties: { message: { type: string }, appointment: { $ref: '#/components/schemas/Appointment' }, quotation: { $ref: '#/components/schemas/Quotation' } } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /technician/service-records/{id}/complete: # Thêm route này
    put:
      tags: [Technician]
      summary: (Technician) Hoàn thành công việc (-> COMPLETED)
      security: [ { bearerAuth: [] } ] # Roles: TECHNICIAN
      parameters: [ { $ref: '#/components/parameters/ServiceRecordIdPath' } ]
      requestBody: { $ref: '#/components/requestBodies/CompletionInput' }
      responses:
        '200':
          description: Hoàn thành thành công.
          content: { application/json: { schema: { properties: { message: { type: string }, data: { properties: { serviceRecord: { $ref: '#/components/schemas/ServiceRecord' }, appointment: { $ref: '#/components/schemas/Appointment' } } } } } } }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

# ===============================================
# COMPONENTS (Giữ nguyên định nghĩa ở đây)
# ===============================================
components:
  # --- SCHEMAS ---
  schemas:
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        userCode: { type: string, nullable: true }
        fullName: { type: string }
        email: { type: string, format: email }
        role: { $ref: '#/components/schemas/RoleEnum' }
        phoneNumber: { type: string, nullable: true }
        address: { type: string, nullable: true }
        serviceCenterId: { type: string, format: uuid, nullable: true }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        # Không bao gồm passwordHash

    Vehicle:
      type: object
      properties:
        id: { type: string, format: uuid }
        make: { type: string }
        model: { type: string }
        year: { type: integer }
        vin: { type: string }
        licensePlate: { type: string, nullable: true }
        currentMileage: { type: integer, nullable: true }
        lastServiceDate: { type: string, format: date, nullable: true }
        ownerId: { type: string, format: uuid }

    ServiceType:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string, nullable: true }

    ServiceCenter:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        address: { type: string }
        phoneNumber: { type: string, nullable: true }
        openingTime: { type: string, example: "08:00" }
        closingTime: { type: string, example: "17:00" }
        slotDurationMinutes: { type: integer }
        capacityPerSlot: { type: integer }

    AvailableSlot:
      type: object
      properties:
        time: { type: string, format: date-time }
        available: { type: boolean }

    Appointment:
      type: object
      properties:
        id: { type: string, format: uuid }
        appointmentDate: { type: string, format: date-time }
        status: { $ref: '#/components/schemas/AppointmentStatusEnum' }
        customerNotes: { type: string, nullable: true }
        customerId: { type: string, format: uuid }
        vehicleId: { type: string, format: uuid }
        serviceCenterId: { type: string, format: uuid }
        createdAt: { type: string, format: date-time }

    ServiceRecord:
      type: object
      properties:
        id: { type: string, format: uuid }
        appointmentId: { type: string, format: uuid }
        technicianId: { type: string, format: uuid }
        status: { $ref: '#/components/schemas/ServiceRecordStatusEnum', nullable: true }
        startTime: { type: string, format: date-time, nullable: true }
        endTime: { type: string, format: date-time, nullable: true }
        staffNotes: { type: string, nullable: true }

    Quotation:
      type: object
      properties:
        id: { type: string, format: uuid }
        serviceRecordId: { type: string, format: uuid }
        estimatedCost: { type: number, format: double }
        creationDate: { type: string, format: date-time }

    Invoice:
      type: object
      properties:
        id: { type: string, format: uuid }
        serviceRecordId: { type: string, format: uuid }
        totalAmount: { type: number, format: double }
        status: { $ref: '#/components/schemas/InvoiceStatusEnum' }
        issueDate: { type: string, format: date-time }
        dueDate: { type: string, format: date-time }

    Payment:
      type: object
      properties:
        id: { type: string, format: uuid }
        invoiceId: { type: string, format: uuid }
        paymentMethod: { type: string }
        status: { $ref: '#/components/schemas/PaymentStatusEnum' }
        paymentDate: { type: string, format: date-time }

    UserSummary: # Dùng cho Admin xem danh sách
      type: object
      properties:
        id: { type: string, format: uuid }
        fullName: { type: string }
        email: { type: string, format: email }
        role: { $ref: '#/components/schemas/RoleEnum' }

    LoginResponse:
      type: object
      properties:
        message: { type: string }
        token: { type: string }
        user: { $ref: '#/components/schemas/User' }

    GoogleOAuthResponse:
      type: object
      properties:
        message: { type: string }
        token: { type: string }
        user: { $ref: '#/components/schemas/User' }

    CreateAccountResponse:
       type: object
       properties:
         user: { $ref: '#/components/schemas/UserSummary' }
         temporaryPassword: { type: string, description: "Mật khẩu tạm thời cho tài khoản mới" }


    TechnicianInfo:
      type: object
      properties:
        id: { type: string, format: uuid }
        fullName: { type: string }
        userCode: { type: string, nullable: true }
        email: { type: string, format: email }

    CustomerInfoSummary:
      type: object
      properties:
        fullName: { type: string }
        phoneNumber: { type: string, nullable: true }

    VehicleInfoSummary:
      type: object
      properties:
        make: { type: string }
        model: { type: string }
        licensePlate: { type: string, nullable: true }

    AppointmentSummaryStaffView:
      type: object
      properties:
        id: { type: string, format: uuid }
        appointmentDate: { type: string, format: date-time }
        status: { $ref: '#/components/schemas/AppointmentStatusEnum' }
        customer: { $ref: '#/components/schemas/CustomerInfoSummary' }
        vehicle: { $ref: '#/components/schemas/VehicleInfoSummary' }

    AppointmentDetailSharedView: # Dùng chung cho GET /appointments/{id}
      allOf:
        - $ref: '#/components/schemas/Appointment'
        - type: object
          properties:
            customer: { $ref: '#/components/schemas/User' } # Full customer info
            vehicle: { $ref: '#/components/schemas/Vehicle' } # Full vehicle info
            serviceCenterName: { type: string, nullable: true } # Center name
            requestedServices:
              type: array
              items: { $ref: '#/components/schemas/ServiceType' } # List of service types
            quotation: { $ref: '#/components/schemas/Quotation', nullable: true } # Quotation if exists

    # Các schema AppointmentDetailCustomerView và AppointmentDetailStaffView có thể loại bỏ nếu schema chung đủ dùng

    TechnicianTaskSummary:
      type: object
      properties:
        id: { type: string, format: uuid } # Service Record ID
        status: { $ref: '#/components/schemas/ServiceRecordStatusEnum', nullable: true }
        startTime: { type: string, format: date-time, nullable: true }
        appointment:
          type: object
          properties:
            id: { type: string, format: uuid }
            appointmentDate: { type: string, format: date-time }
            customer: { $ref: '#/components/schemas/CustomerInfoSummary' }
            vehicle: { $ref: '#/components/schemas/VehicleInfoSummary' }

    # --- ENUMS ---
    RoleEnum:
      type: string
      enum: [CUSTOMER, STAFF, TECHNICIAN, INVENTORY_MANAGER, ADMIN, STATION_ADMIN]
    AppointmentStatusEnum:
      type: string
      enum: [PENDING, CONFIRMED, PENDING_APPROVAL, IN_PROGRESS, COMPLETED, CANCELLED]
    ServiceRecordStatusEnum:
      type: string
      enum: [PENDING, DIAGNOSING, WAITING_APPROVAL, WAITING_PARTS, REPAIRING, QUALITY_CHECK, COMPLETED, CANCELLED]
    InvoiceStatusEnum:
      type: string
      enum: [UNPAID, PAID, OVERDUE]
    PaymentStatusEnum:
      type: string
      enum: [PENDING, SUCCESSFUL, FAILED]

    ErrorResponse:
      type: object
      properties:
        message: { type: string }

  # --- REQUEST BODIES ---
  requestBodies:
    RegisterInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [fullName, email, password, confirmPassword]
            properties:
              fullName: { type: string }
              email: { type: string, format: email }
              password: { type: string, format: password, minLength: 5 }
              confirmPassword: { type: string, format: password }
              phoneNumber: { type: string, nullable: true }

    LoginInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, password]
            properties:
              email: { type: string, format: email }
              password: { type: string, format: password }

    ForgotPasswordInput:
      required: true
      content: { application/json: { schema: { type: object, required: [email], properties: { email: { type: string, format: email } } } } }

    VerifyCodeInput:
      required: true
      content: { application/json: { schema: { type: object, required: [email, resetCode], properties: { email: { type: string, format: email }, resetCode: { type: string } } } } }

    ResetPasswordInput:
      required: true
      content: { application/json: { schema: { type: object, required: [newPassword, confirmPassword], properties: { newPassword: { type: string, format: password, minLength: 5 }, confirmPassword: { type: string, format: password } } } } }

    UpdateProfileInput:
      required: true
      content: { application/json: { schema: { type: object, properties: { fullName: { type: string }, phoneNumber: { type: string }, address: { type: string } } } } }

    ChangePasswordInput:
      required: true
      content: { application/json: { schema: { type: object, required: [oldPassword, newPassword], properties: { oldPassword: { type: string, format: password }, newPassword: { type: string, format: password, minLength: 5 } } } } }

    CreateAccountInput:
       required: true
       content:
         application/json:
           schema:
             type: object
             required: [fullName, email, role]
             properties:
               fullName: { type: string }
               email: { type: string, format: email }
               role: { $ref: '#/components/schemas/RoleEnum' }
               serviceCenterId: { type: string, format: uuid, description: "Bắt buộc nếu role là nhân viên và người tạo là ADMIN", nullable: true }

    VehicleInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [make, model, year, vin]
            properties:
              make: { type: string }
              model: { type: string }
              year: { type: integer }
              vin: { type: string }
              licensePlate: { type: string, nullable: true }
              currentMileage: { type: integer, nullable: true }

    AppointmentInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [vehicleId, serviceCenterId, appointmentDate, requestedServices]
            properties:
              vehicleId: { type: string, format: uuid }
              serviceCenterId: { type: string, format: uuid }
              appointmentDate: { type: string, format: date-time }
              customerNotes: { type: string, nullable: true }
              requestedServices: { type: array, items: { type: string, format: uuid } }

    ConfirmAppointmentInput:
      required: true
      content: { application/json: { schema: { type: object, required: [technicianId], properties: { technicianId: { type: string, format: uuid } } } } }

    DiagnosisInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [estimatedCost]
            properties:
              estimatedCost: { type: number, format: double, minimum: 0 }
              diagnosisNotes: { type: string, nullable: true }

    RespondInput:
      required: true
      content: { application/json: { schema: { type: object, required: [accept], properties: { accept: { type: boolean } } } } }

    CompletionInput: # Body cho KTV hoàn thành công việc
       required: false
       content:
         application/json:
           schema:
             type: object
             properties:
               notes: { type: string, description: "Ghi chú khi hoàn thành (tùy chọn)", nullable: true }


  # --- RESPONSES (Common Errors) ---
  responses:
    BadRequestError:
      description: Bad Request - Dữ liệu không hợp lệ hoặc thiếu.
      content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
    UnauthorizedError:
      description: Unauthorized - Chưa đăng nhập hoặc token không hợp lệ/hết hạn.
      content: { application/json: { schema: { properties: { message: { type: string } } } } }
    ForbiddenError:
      description: Forbidden - Không có quyền truy cập tài nguyên hoặc thực hiện hành động.
      content: { application/json: { schema: { properties: { message: { type: string } } } } }
    NotFoundError:
      description: Not Found - Không tìm thấy tài nguyên được yêu cầu.
      content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  # --- PARAMETERS ---
  parameters:
    AppointmentIdPath:
      name: id
      in: path
      required: true
      description: ID Lịch hẹn (Appointment)
      schema: { type: string, format: uuid }
    ServiceCenterIdPath:
      name: id
      in: path
      required: true
      description: ID Trung tâm (Service Center)
      schema: { type: string, format: uuid }
    ServiceRecordIdPath:
      name: id
      in: path
      required: true
      description: ID Bản ghi dịch vụ (Service Record)
      schema: { type: string, format: uuid }
    InvoiceIdPath:
      name: id
      in: path
      required: true
      description: ID Hóa đơn (Invoice)
      schema: { type: string, format: uuid }
    DateQuery:
      name: date
      in: query
      required: true
      description: Ngày (YYYY-MM-DD)
      schema: { type: string, format: date }
    ResetTokenHeader:
      name: Authorization
      in: header
      required: true
      description: "Token tạm thời để reset password. Ví dụ: 'Bearer {resetToken}'"
      schema: { type: string }

  # --- SECURITY ---
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Nhập JWT token. Ví dụ: 'Bearer {token}'"

# --- GLOBAL SECURITY ---
# security:
#   - bearerAuth: [] # Bật nếu hầu hết API cần xác thực