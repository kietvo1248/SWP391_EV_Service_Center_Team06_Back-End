/**
 * Remote seed script cho PostgreSQL server ƒë·ªôc l·∫≠p
 * S·ª≠ d·ª•ng khi c·∫ßn seed data v√†o database ƒë√£ deploy
 */

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function seedRemoteDatabase() {
    try {
        console.log('üå± B·∫Øt ƒë·∫ßu seed data v√†o remote PostgreSQL...\n');

        // 1. Test connection
        console.log('üîå Ki·ªÉm tra k·∫øt n·ªëi database...');
        await prisma.$connect();
        console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!\n');

        // 2. Check existing data
        console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu hi·ªán c√≥...');
        const existingUsers = await prisma.user.count();
        const existingCenters = await prisma.serviceCenter.count();

        if (existingUsers > 0 || existingCenters > 0) {
            console.log(`üìä Database ƒë√£ c√≥ d·ªØ li·ªáu:`);
            console.log(`   - Users: ${existingUsers}`);
            console.log(`   - Service Centers: ${existingCenters}`);

            const readline = require('readline');
            const rl = readline.createInterface({
                input: process.stdin,
                output: process.stdout
            });

            const answer = await new Promise((resolve) => {
                rl.question('‚ùì B·∫°n c√≥ mu·ªën x√≥a d·ªØ li·ªáu c≈© v√† seed l·∫°i? (y/N): ', resolve);
            });
            rl.close();

            if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
                console.log('‚ùå H·ªßy seed data.');
                return;
            }

            // Clear existing data
            console.log('üóëÔ∏è X√≥a d·ªØ li·ªáu c≈©...');
            await prisma.appointmentService.deleteMany();
            await prisma.serviceAppointment.deleteMany();
            await prisma.inventoryItem.deleteMany();
            await prisma.part.deleteMany();
            await prisma.serviceType.deleteMany();
            await prisma.vehicle.deleteMany();
            await prisma.user.deleteMany();
            await prisma.serviceCenter.deleteMany();
            console.log('‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈©.\n');
        }

        // 3. Create Service Center
        console.log('üè¢ T·∫°o trung t√¢m d·ªãch v·ª•...');
        const serviceCenter = await prisma.serviceCenter.create({
            data: {
                name: 'EV Service Center H·ªì Ch√≠ Minh',
                address: '123 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP.HCM',
                phoneNumber: '028-1234-5678',
                openingTime: '08:00',
                closingTime: '17:00',
                slotDurationMinutes: 60,
                capacityPerSlot: 2
            }
        });
        console.log('‚úÖ Service Center:', serviceCenter.name);

        // 4. Create Users
        console.log('üë• T·∫°o users...');
        const users = [
            {
                userCode: 'ADMIN001',
                fullName: 'System Administrator',
                email: 'admin@evservice.com',
                password: 'admin123',
                role: 'ADMIN',
                serviceCenterId: serviceCenter.id
            },
            {
                userCode: 'STATION001',
                fullName: 'Station Manager',
                email: 'station@evservice.com',
                password: 'station123',
                role: 'STATION_ADMIN',
                serviceCenterId: serviceCenter.id
            },
            {
                userCode: 'STAFF001',
                fullName: 'Nguy·ªÖn VƒÉn Staff',
                email: 'staff@evservice.com',
                password: 'staff123',
                role: 'STAFF',
                serviceCenterId: serviceCenter.id
            },
            {
                userCode: 'TECH001',
                fullName: 'L√™ VƒÉn Technician',
                email: 'tech@evservice.com',
                password: 'tech123',
                role: 'TECHNICIAN',
                serviceCenterId: serviceCenter.id
            },
            {
                userCode: 'CUST001',
                fullName: 'Nguy·ªÖn VƒÉn Customer',
                email: 'customer@example.com',
                password: 'customer123',
                role: 'CUSTOMER'
            }
        ];

        for (const userData of users) {
            const hashedPassword = await bcrypt.hash(userData.password, 10);
            const user = await prisma.user.create({
                data: {
                    userCode: userData.userCode,
                    fullName: userData.fullName,
                    email: userData.email,
                    passwordHash: hashedPassword,
                    phoneNumber: `0901234${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`,
                    address: `${Math.floor(Math.random() * 999) + 1} Street, TP.HCM`,
                    role: userData.role,
                    serviceCenterId: userData.serviceCenterId
                }
            });
            console.log(`‚úÖ ${userData.role}: ${user.email}`);
        }

        // 5. Create Service Types
        console.log('üîß T·∫°o service types...');
        const serviceTypes = [
            { name: 'B·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥', description: 'Ki·ªÉm tra t·ªïng qu√°t v√† b·∫£o d∆∞·ª°ng theo khuy·∫øn ngh·ªã' },
            { name: 'S·ª≠a ch·ªØa pin', description: 'Thay th·∫ø v√† s·ª≠a ch·ªØa pin xe ƒëi·ªán' },
            { name: 'Ki·ªÉm tra h·ªá th·ªëng ƒëi·ªán', description: 'Ki·ªÉm tra v√† s·ª≠a ch·ªØa h·ªá th·ªëng ƒëi·ªán t·ª≠' },
            { name: 'D·ªãch v·ª• l·ªëp', description: 'Thay l·ªëp, c√¢n b·∫±ng ƒë·ªông, ƒë·∫£o l·ªëp' },
            { name: 'H·ªá th·ªëng phanh', description: 'Ki·ªÉm tra v√† thay m√° phanh, d·∫ßu phanh' }
        ];

        for (const serviceType of serviceTypes) {
            await prisma.serviceType.create({
                data: serviceType
            });
        }
        console.log('‚úÖ Service Types ƒë√£ ƒë∆∞·ª£c t·∫°o');

        // 6. Create Parts and Inventory
        console.log('üì¶ T·∫°o parts v√† inventory...');
        const parts = [
            { sku: 'VF-TYRE-001', name: 'L·ªëp VinFast VF8 (235/55 R19)', price: 4500000 },
            { sku: 'VF-BAT-COOL', name: 'N∆∞·ªõc l√†m m√°t pin (1L)', price: 350000 },
            { sku: 'VF-FILTER-AC', name: 'L·ªçc gi√≥ ƒëi·ªÅu h√≤a HEPA', price: 780000 },
            { sku: 'VF-BRAKE-PAD', name: 'M√° phanh tr∆∞·ªõc VinFast', price: 2100000 }
        ];

        for (const part of parts) {
            const createdPart = await prisma.part.create({
                data: part
            });

            await prisma.inventoryItem.create({
                data: {
                    partId: createdPart.id,
                    serviceCenterId: serviceCenter.id,
                    quantityInStock: 50,
                    minStockLevel: 10
                }
            });
        }
        console.log('‚úÖ Parts v√† Inventory ƒë√£ ƒë∆∞·ª£c t·∫°o');

        // 7. Create Vehicle
        console.log('üöó T·∫°o vehicle...');
        const customer = await prisma.user.findUnique({
            where: { email: 'customer@example.com' }
        });

        const vehicle = await prisma.vehicle.create({
            data: {
                make: 'VinFast',
                model: 'VF8',
                year: 2023,
                vin: 'VF8VIN123456789',
                licensePlate: '51A-12345',
                currentMileage: 15000,
                lastServiceDate: new Date('2024-01-15'),
                ownerId: customer.id
            }
        });
        console.log('‚úÖ Vehicle:', vehicle.make, vehicle.model);

        // 8. Create Appointment
        console.log('üìÖ T·∫°o appointment...');
        const serviceType1 = await prisma.serviceType.findFirst({
            where: { name: 'B·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥' }
        });
        const serviceType2 = await prisma.serviceType.findFirst({
            where: { name: 'H·ªá th·ªëng phanh' }
        });

        const appointment = await prisma.serviceAppointment.create({
            data: {
                appointmentDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
                status: 'PENDING',
                customerNotes: 'Xe c√≥ ti·∫øng k√™u l·∫° ·ªü phanh, c·∫ßn ki·ªÉm tra',
                customerId: customer.id,
                vehicleId: vehicle.id,
                serviceCenterId: serviceCenter.id,
                requestedServices: {
                    create: [
                        { serviceTypeId: serviceType1.id },
                        { serviceTypeId: serviceType2.id }
                    ]
                }
            }
        });
        console.log('‚úÖ Appointment ƒë√£ ƒë∆∞·ª£c t·∫°o');

        console.log('\nüéâ Seed data ho√†n t·∫•t!');
        console.log('\nüìã Th√¥ng tin ƒëƒÉng nh·∫≠p:');
        console.log('üë§ Admin: admin@evservice.com / admin123');
        console.log('üë®‚Äçüíº Station Admin: station@evservice.com / station123');
        console.log('üë®‚Äçüîß Staff: staff@evservice.com / staff123');
        console.log('üîß Technician: tech@evservice.com / tech123');
        console.log('üë§ Customer: customer@example.com / customer123');

    } catch (error) {
        console.error('‚ùå L·ªói seed data:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    seedRemoteDatabase()
        .then(() => {
            console.log('\n‚úÖ Remote seed ho√†n t·∫•t!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå Remote seed th·∫•t b·∫°i:', error.message);
            process.exit(1);
        });
}

module.exports = seedRemoteDatabase;
