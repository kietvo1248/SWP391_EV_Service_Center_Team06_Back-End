/**
 * Database initialization script cho Render deployment
 * Ch·∫°y migrations v√† seed data
 */

const { PrismaClient } = require('@prisma/client');
const createProductionSeedData = require('./production-seed');

const prisma = new PrismaClient();

async function initializeDatabase() {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o database...\n');

        // 1. Test database connection
        console.log('üîå Ki·ªÉm tra k·∫øt n·ªëi database...');
        await prisma.$connect();
        console.log('‚úÖ Database connection th√†nh c√¥ng!\n');

        // 2. Check if database is already seeded
        console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu hi·ªán c√≥...');
        const existingUsers = await prisma.user.count();

        if (existingUsers > 0) {
            console.log(`üìä Database ƒë√£ c√≥ ${existingUsers} users. B·ªè qua seed data.`);
            console.log('‚úÖ Database ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥.');
            return;
        }

        // 3. Run production seed
        console.log('üå± Ch·∫°y production seed data...');
        await createProductionSeedData();

        console.log('\nüéâ Database initialization ho√†n t·∫•t!');

    } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi t·∫°o database:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    initializeDatabase()
        .then(() => {
            console.log('\n‚úÖ Database initialization ho√†n t·∫•t!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå Database initialization th·∫•t b·∫°i:', error.message);
            process.exit(1);
        });
}

module.exports = initializeDatabase;
