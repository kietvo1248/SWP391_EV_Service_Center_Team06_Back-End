/**
 * Production seed script cho Render deployment
 * T·∫°o d·ªØ li·ªáu m·∫´u cho production environment
 */

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createProductionSeedData() {
    try {
        console.log('üå± B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u cho production...\n');

        // 1. T·∫°o Service Center m·∫´u
        console.log('üè¢ T·∫°o trung t√¢m d·ªãch v·ª•...');
        const serviceCenter = await prisma.serviceCenter.upsert({
            where: { id: 'prod-service-center-1' },
            update: {},
            create: {
                id: 'prod-service-center-1',
                name: 'EV Service Center H·ªì Ch√≠ Minh',
                address: '123 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP.HCM',
                phoneNumber: '028-1234-5678',
                openingTime: '08:00',
                closingTime: '17:00',
                slotDurationMinutes: 60,
                capacityPerSlot: 2
            }
        });
        console.log('‚úÖ Service Center:', serviceCenter.name);

        // 2. T·∫°o Admin user
        console.log('üë§ T·∫°o t√†i kho·∫£n admin...');
        const adminPassword = await bcrypt.hash('admin123', 10);
        const admin = await prisma.user.upsert({
            where: { email: 'admin@evservice.com' },
            update: {},
            create: {
                userCode: 'ADMIN001',
                fullName: 'System Administrator',
                email: 'admin@evservice.com',
                passwordHash: adminPassword,
                phoneNumber: '0901234567',
                address: '123 Admin Street, TP.HCM',
                role: 'ADMIN',
                serviceCenterId: serviceCenter.id
            }
        });
        console.log('‚úÖ Admin user:', admin.email);

        // 3. T·∫°o Station Admin
        console.log('üë®‚Äçüíº T·∫°o Station Admin...');
        const stationAdminPassword = await bcrypt.hash('station123', 10);
        const stationAdmin = await prisma.user.upsert({
            where: { email: 'station@evservice.com' },
            update: {},
            create: {
                userCode: 'STATION001',
                fullName: 'Station Manager',
                email: 'station@evservice.com',
                passwordHash: stationAdminPassword,
                phoneNumber: '0901234568',
                address: '456 Station Street, TP.HCM',
                role: 'STATION_ADMIN',
                serviceCenterId: serviceCenter.id
            }
        });
        console.log('‚úÖ Station Admin:', stationAdmin.email);

        // 4. T·∫°o Staff user
        console.log('üë®‚Äçüîß T·∫°o t√†i kho·∫£n staff...');
        const staffPassword = await bcrypt.hash('staff123', 10);
        const staff = await prisma.user.upsert({
            where: { email: 'staff@evservice.com' },
            update: {},
            create: {
                userCode: 'STAFF001',
                fullName: 'Nguy·ªÖn VƒÉn Staff',
                email: 'staff@evservice.com',
                passwordHash: staffPassword,
                phoneNumber: '0901234569',
                address: '789 Staff Street, TP.HCM',
                role: 'STAFF',
                serviceCenterId: serviceCenter.id
            }
        });
        console.log('‚úÖ Staff user:', staff.email);

        // 5. T·∫°o Technician
        console.log('üîß T·∫°o Technician...');
        const techPassword = await bcrypt.hash('tech123', 10);
        const technician = await prisma.user.upsert({
            where: { email: 'tech@evservice.com' },
            update: {},
            create: {
                userCode: 'TECH001',
                fullName: 'L√™ VƒÉn Technician',
                email: 'tech@evservice.com',
                passwordHash: techPassword,
                phoneNumber: '0901234570',
                address: '101 Tech Street, TP.HCM',
                role: 'TECHNICIAN',
                serviceCenterId: serviceCenter.id
            }
        });
        console.log('‚úÖ Technician:', technician.email);

        // 6. T·∫°o Customer user
        console.log('üë§ T·∫°o t√†i kho·∫£n customer...');
        const customerPassword = await bcrypt.hash('customer123', 10);
        const customer = await prisma.user.upsert({
            where: { email: 'customer@example.com' },
            update: {},
            create: {
                userCode: 'CUST001',
                fullName: 'Nguy·ªÖn VƒÉn Customer',
                email: 'customer@example.com',
                passwordHash: customerPassword,
                phoneNumber: '0901234571',
                address: '202 Customer Street, TP.HCM',
                role: 'CUSTOMER'
            }
        });
        console.log('‚úÖ Customer user:', customer.email);

        // 7. T·∫°o Service Types
        console.log('üîß T·∫°o c√°c lo·∫°i d·ªãch v·ª•...');
        const serviceTypes = [
            {
                id: 'service-type-1',
                name: 'B·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥',
                description: 'Ki·ªÉm tra t·ªïng qu√°t v√† b·∫£o d∆∞·ª°ng theo khuy·∫øn ngh·ªã c·ªßa nh√† s·∫£n xu·∫•t'
            },
            {
                id: 'service-type-2',
                name: 'S·ª≠a ch·ªØa pin',
                description: 'Thay th·∫ø v√† s·ª≠a ch·ªØa pin xe ƒëi·ªán'
            },
            {
                id: 'service-type-3',
                name: 'Ki·ªÉm tra h·ªá th·ªëng ƒëi·ªán',
                description: 'Ki·ªÉm tra v√† s·ª≠a ch·ªØa h·ªá th·ªëng ƒëi·ªán t·ª≠'
            },
            {
                id: 'service-type-4',
                name: 'D·ªãch v·ª• l·ªëp',
                description: 'Thay l·ªëp, c√¢n b·∫±ng ƒë·ªông, ƒë·∫£o l·ªëp'
            },
            {
                id: 'service-type-5',
                name: 'H·ªá th·ªëng phanh',
                description: 'Ki·ªÉm tra v√† thay m√° phanh, d·∫ßu phanh'
            }
        ];

        for (const serviceType of serviceTypes) {
            await prisma.serviceType.upsert({
                where: { id: serviceType.id },
                update: {},
                create: serviceType
            });
        }
        console.log('‚úÖ Service Types ƒë√£ ƒë∆∞·ª£c t·∫°o');

        // 8. T·∫°o Parts v√† Inventory
        console.log('üì¶ T·∫°o ph·ª• t√πng v√† kho h√†ng...');
        const parts = [
            {
                id: 'part-1',
                sku: 'VF-TYRE-001',
                name: 'L·ªëp VinFast VF8 (235/55 R19)',
                description: 'L·ªëp chuy√™n d·ª•ng cho VinFast VF8',
                price: 4500000
            },
            {
                id: 'part-2',
                sku: 'VF-BAT-COOL',
                name: 'N∆∞·ªõc l√†m m√°t pin (1L)',
                description: 'Ch·∫•t l√†m m√°t pin chuy√™n d·ª•ng',
                price: 350000
            },
            {
                id: 'part-3',
                sku: 'VF-FILTER-AC',
                name: 'L·ªçc gi√≥ ƒëi·ªÅu h√≤a HEPA',
                description: 'L·ªçc gi√≥ ƒëi·ªÅu h√≤a cao c·∫•p',
                price: 780000
            },
            {
                id: 'part-4',
                sku: 'VF-BRAKE-PAD',
                name: 'M√° phanh tr∆∞·ªõc VinFast',
                description: 'M√° phanh chuy√™n d·ª•ng cho xe VinFast',
                price: 2100000
            }
        ];

        for (const part of parts) {
            await prisma.part.upsert({
                where: { id: part.id },
                update: {},
                create: part
            });

            // T·∫°o inventory item cho service center
            await prisma.inventoryItem.create({
                data: {
                    partId: part.id,
                    serviceCenterId: serviceCenter.id,
                    quantityInStock: 50,
                    minStockLevel: 10
                }
            });
        }
        console.log('‚úÖ Parts v√† Inventory ƒë√£ ƒë∆∞·ª£c t·∫°o');

        // 9. T·∫°o Vehicle m·∫´u
        console.log('üöó T·∫°o xe m·∫´u...');
        const vehicle = await prisma.vehicle.upsert({
            where: { vin: 'VF8VIN123456789' },
            update: {},
            create: {
                make: 'VinFast',
                model: 'VF8',
                year: 2023,
                vin: 'VF8VIN123456789',
                licensePlate: '51A-12345',
                currentMileage: 15000,
                lastServiceDate: new Date('2024-01-15'),
                ownerId: customer.id
            }
        });
        console.log('‚úÖ Vehicle:', vehicle.make, vehicle.model);

        // 10. T·∫°o Appointment m·∫´u
        console.log('üìÖ T·∫°o l·ªãch h·∫πn m·∫´u...');
        const appointment = await prisma.serviceAppointment.create({
            data: {
                appointmentDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 ng√†y sau
                status: 'PENDING',
                customerNotes: 'Xe c√≥ ti·∫øng k√™u l·∫° ·ªü phanh, c·∫ßn ki·ªÉm tra',
                customerId: customer.id,
                vehicleId: vehicle.id,
                serviceCenterId: serviceCenter.id,
                requestedServices: {
                    create: [
                        { serviceTypeId: 'service-type-1' }, // B·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥
                        { serviceTypeId: 'service-type-5' }  // H·ªá th·ªëng phanh
                    ]
                }
            }
        });
        console.log('‚úÖ Appointment ƒë√£ ƒë∆∞·ª£c t·∫°o');

        console.log('\nüéâ Production seed data ho√†n t·∫•t!');
        console.log('\nüìã Th√¥ng tin ƒëƒÉng nh·∫≠p:');
        console.log('üë§ Admin: admin@evservice.com / admin123');
        console.log('üë®‚Äçüíº Station Admin: station@evservice.com / station123');
        console.log('üë®‚Äçüîß Staff: staff@evservice.com / staff123');
        console.log('üîß Technician: tech@evservice.com / tech123');
        console.log('üë§ Customer: customer@example.com / customer123');

    } catch (error) {
        console.error('‚ùå L·ªói t·∫°o seed data:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    createProductionSeedData()
        .then(() => {
            console.log('\n‚úÖ Production seed ho√†n t·∫•t!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå Production seed th·∫•t b·∫°i:', error.message);
            process.exit(1);
        });
}

module.exports = createProductionSeedData;
